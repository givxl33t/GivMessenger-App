type Book {
  author: String!
  id: String!
  publishedDate: Boolean!
  title: String!
}

input BookInput {
  author: String!
  publishedDate: Boolean!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Message {
  createdAt: DateTime!
  id: String!
  room: Room!
  text: String!
  updatedAt: DateTime!
  user: User!
}

input MessageInput {
  room: String!
  text: String!
}

type Mutation {
  createBook(input: BookInput!): Book!
  createMessage(input: MessageInput!): Message!
  createRoom(recipientId: ID!): Room!
  createUser(input: UserInput!): User!
  deleteBook(id: ID!): Book!
  login(input: LoginInput!): User!
  logout: Boolean!
  readNotifications(ids: [String!]!): Boolean!
  updateBook(id: ID!, input: BookInput!): Book!
}

type Notification {
  createdAt: DateTime!
  id: String!
  metadata: [NotificationMetadata!]!
  read: Boolean!
  receiver: User!
  text: String!
  updatedAt: DateTime!
}

type NotificationMetadata {
  key: String!
  value: String!
}

type Query {
  book(id: ID!): Book!
  books: [Book!]!
  me: User!
  message(id: ID!): Message!
  messages: [Message!]!
  myNotifications(limit: Float): [Notification!]!
  room(id: ID!): Room!
  roomToUser(to: ID!): Room!
  rooms: [Room!]!
  user(id: ID!): User!
  users: [User!]!
}

type Room {
  id: String!
  messages: [Message!]!
  users: [User!]!
}

type Subscription {
  messageCreated: Message!
  notificationCreated: Notification!
  userStatusUpdated: UserStatusSubscription!
}

type User {
  email: String!
  id: String!
  is_online: Boolean!
  name: String!
  password: String!
}

input UserInput {
  email: String!
  name: String!
  password: String!
}

type UserStatusSubscription {
  id: String!
  is_online: Boolean!
}
